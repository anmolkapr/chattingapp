{"ast":null,"code":"var _jsxFileName = \"C:\\\\CHATAPP\\\\frontend\\\\src\\\\components\\\\MyChats.js\",\n    _s = $RefreshSig$();\n\nimport { AddIcon } from '@chakra-ui/icons';\nimport { Box, Button, Stack, Text, useToast } from '@chakra-ui/react';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { getSender } from '../config/chatLogics';\nimport { ChatState } from '../Context/ChatProvider';\nimport ChatLoading from \"./chatLoading\";\nimport GroupChatModal from './miscellanious/GroupChatModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyChats = () => {\n  _s();\n\n  const [loggedUser, setLoggedUser] = useState();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    chats,\n    setChats\n  } = ChatState();\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(\"/api/chat\", config);\n      console.log(data);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\"\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    d: {\n      base: selectedChat ? \"none\" : \"flex\",\n      md: \"flex\"\n    },\n    flexDir: \"column\",\n    alignItems: \"center\",\n    p: 3,\n    bg: \"white\",\n    w: {\n      base: \"100%\",\n      md: \"31%\"\n    },\n    borderRadius: \"lg\",\n    borderWidth: \"1px\",\n    Box: true,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      pb: 3,\n      px: 3,\n      fontSize: {\n        base: \"28px\",\n        md: \"30px\"\n      },\n      fontFamily: \"Work sans\",\n      d: \"flex\",\n      w: \"100%\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [\"My CHATS\", /*#__PURE__*/_jsxDEV(GroupChatModal, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          d: \"flex\",\n          fontSize: {\n            base: \"17px\",\n            md: \"10px\",\n            lg: \"17px\"\n          },\n          rightIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 24\n          }, this),\n          children: \"New Group Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      d: \"flex\",\n      flexDir: \"column\",\n      p: 3,\n      bg: \"#F8F8F8\",\n      w: \"100%\",\n      h: \"100%\",\n      borderRadius: \"lg\",\n      overflowY: \"hidden\",\n      children: chats ? /*#__PURE__*/_jsxDEV(Stack, {\n        overflowY: \"scroll\",\n        children: chats.map(chat => /*#__PURE__*/_jsxDEV(Box, {\n          onClick: () => setSelectedChat(chat),\n          cursor: \"pointer\",\n          bg: selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\",\n          color: selectedChat === chat ? \"white\" : \"black\",\n          px: 3,\n          py: 2,\n          borderRadius: \"lg\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            children: !chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 18\n          }, this)\n        }, chat._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChatLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyChats, \"YQd3AWel/HFwk7lFM1/6tXxZbeA=\", false, function () {\n  return [useToast];\n});\n\n_c = MyChats;\nexport default MyChats;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyChats\");","map":{"version":3,"sources":["C:/CHATAPP/frontend/src/components/MyChats.js"],"names":["AddIcon","Box","Button","Stack","Text","useToast","axios","React","useEffect","useState","getSender","ChatState","ChatLoading","GroupChatModal","MyChats","loggedUser","setLoggedUser","selectedChat","setSelectedChat","user","chats","setChats","toast","fetchChats","config","headers","Authorization","token","data","get","console","log","error","title","description","status","duration","isClosable","position","JSON","parse","localStorage","getItem","base","md","lg","map","chat","isGroupChat","users","chatName","_id"],"mappings":"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","sourcesContent":["import { AddIcon } from '@chakra-ui/icons';\r\nimport { Box, Button, Stack, Text, useToast } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { getSender } from '../config/chatLogics';\r\nimport { ChatState } from '../Context/ChatProvider';\r\nimport ChatLoading from \"./chatLoading\";\r\nimport GroupChatModal from './miscellanious/GroupChatModal';\r\n\r\nconst MyChats = () => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n  const toast = useToast();\r\n  \r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      console.log(data);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n   \r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n    d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n    flexDir=\"column\"\r\n    alignItems=\"center\"\r\n    p={3}\r\n    bg=\"white\"\r\n    w={{ base: \"100%\", md: \"31%\" }}\r\n    borderRadius=\"lg\"\r\n    borderWidth=\"1px\"\r\n  \r\n  Box>\r\n     <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >My CHATS\r\n      <GroupChatModal>\r\n      <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n      </GroupChatModal>\r\n        </Box>\r\n        <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        \r\n        {chats?(\r\n          <Stack overflowY=\"scroll\">\r\n              {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                 <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                </Box>))}\r\n          </Stack>\r\n\r\n        ):(\r\n          <ChatLoading/>\r\n        )}\r\n        </Box></Box>\r\n  )\r\n}\r\n\r\nexport default MyChats\r\n"]},"metadata":{},"sourceType":"module"}