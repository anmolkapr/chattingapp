{"ast":null,"code":"var _jsxFileName = \"C:\\\\CHATAPP\\\\frontend\\\\src\\\\components\\\\singleChats.js\",\n    _s = $RefreshSig$();\n\nimport { ArrowBackIcon } from '@chakra-ui/icons';\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\nimport axios from 'axios';\nimport React, { useState } from 'react';\nimport { getSender, getSenderFull } from '../config/chatLogics';\nimport { ChatState } from '../Context/ChatProvider';\nimport ProfileModal from './miscellanious/ProfileModal';\nimport UpdateGroupChatModal from \"./miscellanious/updateGroupChatModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SingleChats = _ref => {\n  _s();\n\n  let {\n    setFetchAgain,\n    fetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const toast = useToast();\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: `sorry , ${user.name} Failed to send the Message`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n  };\n\n  const {\n    user,\n    selectedChat,\n    setSelectedChat\n  } = ChatState();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\" \", getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          id: \"first-name\",\n          isRequired: true,\n          mt: 3,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: typingHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SingleChats, \"NEVZqRuKxV01mYp6O9i1O6L4z2M=\", false, function () {\n  return [useToast];\n});\n\n_c = SingleChats;\nexport default SingleChats;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChats\");","map":{"version":3,"sources":["C:/CHATAPP/frontend/src/components/singleChats.js"],"names":["ArrowBackIcon","Box","FormControl","IconButton","Input","Spinner","Text","useToast","axios","React","useState","getSender","getSenderFull","ChatState","ProfileModal","UpdateGroupChatModal","SingleChats","setFetchAgain","fetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","toast","sendMessage","event","key","config","headers","Authorization","user","token","data","post","content","chatId","selectedChat","_id","error","title","description","name","status","duration","isClosable","position","typingHandler","e","target","value","setSelectedChat","base","md","isGroupChat","users","chatName","toUpperCase"],"mappings":"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","sourcesContent":["import { ArrowBackIcon } from '@chakra-ui/icons';\r\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport React, { useState } from 'react'\r\nimport { getSender,getSenderFull } from '../config/chatLogics';\r\nimport { ChatState } from '../Context/ChatProvider'\r\nimport ProfileModal from './miscellanious/ProfileModal';\r\nimport UpdateGroupChatModal from \"./miscellanious/updateGroupChatModal\";\r\n\r\nconst SingleChats = ({setFetchAgain,fetchAgain}) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  const toast = useToast();\r\n  const sendMessage = async(event) =>{\r\n    if (event.key === \"Enter\" && newMessage){\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n          \r\n        };\r\n        const { data } = await axios.post(\"/api/message\",\r\n        {\r\n          content: newMessage,\r\n          chatId: selectedChat._id,\r\n        },\r\n        config\r\n      );\r\n    }catch(error){\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: `sorry , ${user.name} Failed to send the Message`,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n\r\n  }}\r\n\r\n  const typingHandler = (e) =>{\r\n    setNewMessage(e.target.value);\r\n\r\n\r\n  }\r\n  const {user,selectedChat,setSelectedChat} = ChatState();\r\n  return (\r\n    <>\r\n      {selectedChat?\r\n      (<>\r\n      <Text\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        pb={3} px={2} w=\"100%\"\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        justifyContent={{ base: \"space-between\" }}\r\n        alignItems=\"center\"\r\n      >\r\n          <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n          {!selectedChat.isGroupChat?\r\n          (<> {getSender(user, selectedChat.users)}\r\n          <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  /></>):(\r\n            <>{selectedChat.chatName.toUpperCase()}\r\n            <UpdateGroupChatModal\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n            />\r\n            </>\r\n          )}\r\n            </Text>\r\n            <Box\r\n            d=\"flex\" flexDir=\"column\" justifyContent=\"flex-end\"\r\n            p={3} bg=\"#E8E8E8\" w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\">\r\n                {loading ? (\r\n              <Spinner size=\"xl\" w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div>\r\n                {/* message */}\r\n              </div>\r\n            )}\r\n            \r\n            <FormControl onKeyDown={sendMessage} id=\"first-name\" isRequired\r\n              mt={3}\r\n            >\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n            </Box>\r\n      </>):\r\n      (\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n\r\n        </Box>)}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SingleChats\r\n"]},"metadata":{},"sourceType":"module"}