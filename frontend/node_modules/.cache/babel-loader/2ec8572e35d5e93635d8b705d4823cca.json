{"ast":null,"code":"var _jsxFileName = \"C:\\\\CHATAPP\\\\frontend\\\\src\\\\components\\\\singleChats.js\",\n    _s = $RefreshSig$();\n\nimport { ArrowBackIcon } from '@chakra-ui/icons';\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { getSender, getSenderFull } from '../config/chatLogics';\nimport { ChatState } from '../Context/ChatProvider';\nimport ProfileModal from './miscellanious/ProfileModal';\nimport UpdateGroupChatModal from \"./miscellanious/updateGroupChatModal\";\nimport ScrollableChat from './ScrollableChat';\nimport \"./styles.css\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\n\nvar socket, selectedChatCompare;\n\nconst SingleChats = _ref => {\n  _s();\n\n  let {\n    setFetchAgain,\n    fetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const {\n    user,\n    selectedChat,\n    setSelectedChat\n  } = ChatState();\n  const toast = useToast();\n  const [socketConnected, setSocketConnected] = useState(false);\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config);\n        console.log(data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: `sorry , ${user.name} Failed to send the Message`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n  }, []);\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n  };\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      console.log(messages);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: `sorry , ${user.name} Failed to load the Message`,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare || // if chat is not selected or doesn't match current chat\n      selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\" \", getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain,\n            fetchMessages: fetchMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          id: \"first-name\",\n          isRequired: true,\n          mt: 3,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: typingHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SingleChats, \"+Xw0IGe8AHOj3opWrCFoWdY84ME=\", false, function () {\n  return [useToast];\n});\n\n_c = SingleChats;\nexport default SingleChats;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChats\");","map":{"version":3,"sources":["C:/CHATAPP/frontend/src/components/singleChats.js"],"names":["ArrowBackIcon","Box","FormControl","IconButton","Input","Spinner","Text","useToast","axios","React","useEffect","useState","getSender","getSenderFull","ChatState","ProfileModal","UpdateGroupChatModal","ScrollableChat","io","ENDPOINT","socket","selectedChatCompare","SingleChats","setFetchAgain","fetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","user","selectedChat","setSelectedChat","toast","socketConnected","setSocketConnected","sendMessage","event","key","config","headers","Authorization","token","data","post","content","chatId","_id","console","log","error","title","description","name","status","duration","isClosable","position","emit","on","typingHandler","e","target","value","fetchMessages","get","newMessageRecieved","chat","notification","includes","setNotification","base","md","isGroupChat","users","chatName","toUpperCase"],"mappings":"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","sourcesContent":["import { ArrowBackIcon } from '@chakra-ui/icons';\r\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { getSender,getSenderFull } from '../config/chatLogics';\r\nimport { ChatState } from '../Context/ChatProvider'\r\nimport ProfileModal from './miscellanious/ProfileModal';\r\nimport UpdateGroupChatModal from \"./miscellanious/updateGroupChatModal\";\r\nimport ScrollableChat from './ScrollableChat';\r\nimport \"./styles.css\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChats = ({setFetchAgain,fetchAgain}) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const {user,selectedChat,setSelectedChat} = ChatState();\r\n  const toast = useToast();\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n\r\n  const sendMessage = async(event) =>{\r\n    if (event.key === \"Enter\" && newMessage){\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n          \r\n        };\r\n        \r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\"/api/message\",\r\n        {\r\n          content: newMessage,\r\n          chatId: selectedChat._id,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      setMessages([...messages, data]);\r\n    }catch(error){\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: `sorry , ${user.name} Failed to send the Message`,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n\r\n  }}\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n      }, []);\r\n\r\n  const typingHandler = (e) =>{\r\n    setNewMessage(e.target.value);\r\n\r\n\r\n  }\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      console.log(messages);\r\n      setMessages(data);\r\n      setLoading(false);\r\n      \r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    \r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: `sorry , ${user.name} Failed to load the Message`,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n\r\n\r\n  }\r\n\r\n  \r\n  \r\n \r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n    selectedChatCompare = selectedChat;\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n  \r\n  return (\r\n    <>\r\n      {selectedChat?\r\n      (<>\r\n      <Text\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        pb={3} px={2} w=\"100%\"\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        justifyContent={{ base: \"space-between\" }}\r\n        alignItems=\"center\"\r\n      >\r\n          <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n          {!selectedChat.isGroupChat?\r\n          (<> {getSender(user, selectedChat.users)}\r\n          <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  /></>):(\r\n            <>{selectedChat.chatName.toUpperCase()}\r\n            <UpdateGroupChatModal\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                    fetchMessages={fetchMessages}\r\n            />\r\n            </>\r\n          )}\r\n            </Text>\r\n            <Box\r\n            d=\"flex\" flexDir=\"column\" justifyContent=\"flex-end\"\r\n            p={3} bg=\"#E8E8E8\" w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\">\r\n                {loading ? (\r\n              <Spinner size=\"xl\" w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n               <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n            \r\n            <FormControl onKeyDown={sendMessage} id=\"first-name\" isRequired\r\n              mt={3}\r\n            >\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n            </Box>\r\n      </>):\r\n      (\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n\r\n        </Box>)}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SingleChats\r\n"]},"metadata":{},"sourceType":"module"}